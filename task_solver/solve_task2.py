from pyspark.sql import functions as f
from pyspark.sql import types as t

from task_solver.const import RESULT_FILE, DATE_FORMAT, NUMBER_CODES
from task_solver.schemas import SCHEMA_REVTOBUCKET
from utils import read_csv, write_to_csv
from utils import spark_builder


class SolveTask2:
    """
    Class for solving Task 2, which involves processing hospital encounter data and revenue bucket data
    to determine the income generated by each revenue code during a specific period.

    Parameters:
    -----------
    spark: SparkSession object
        The Spark session object used for processing data.
    rev_code_path: str
        The path to the revenue bucket file in CSV format.
    he_path: str
        The path to the hospital encounter file in CSV format.
    num: int
        The number of the revenue codes and charge codes.

    """

    def __init__(self, rev_code_path, he_path):
        self.spark = spark_builder(appname='Task 2', partitions=6)
        self.rev_code_df = read_csv(spark=self.spark,
                                    path=rev_code_path,
                                    schema_csv=SCHEMA_REVTOBUCKET,
                                    sep=';')
        self.he_df = read_csv(spark=self.spark,
                              path=he_path,
                              header='true',
                              inferschema='true')

    @staticmethod
    def preparing_rev_df(rev_code_df):
        """
        Casting the columns to needed format
        Preparing rev_df
        Cast the needed column to DateType
        :param rev_code_df: dataframe for casting
        :return casted_df: prepared dataframe to DateType
        """
        rev_code_df = (rev_code_df
                       .withColumn('begin_date', f.to_date(f.col('begin_date'), DATE_FORMAT))
                       .withColumn('end_date', f.to_date(f.col('end_date'), DATE_FORMAT))
                       .withColumn('rev_code', f.col('rev_code').cast(t.IntegerType())))

        return rev_code_df

    @staticmethod
    def preparing_hospital_enc_df(he_df):
        """
        Preparing hospital_enc_df
        Selecting the needed columns and casting discharge_date to date formant
        :param he_df: csv_dataframe for casting column
        :return: prepared DataFrame
        """

        rev_codes = [f.col(f'rev_code{num}').alias(f'rev_code{num}') for num in range(1, NUMBER_CODES)]
        chg_codes = [f.col(f'chg{num}').alias(f'chg{num}') for num in range(1, NUMBER_CODES)]

        combine = f.udf(lambda x, y: list(zip(x, y)),
                        t.ArrayType(t.StructType([t.StructField('zipped_rev', t.StringType()),
                                                  t.StructField('zipped_chg', t.StringType())])))

        he_df_filtered = (he_df
                          .select('record_identifier',
                                  f.to_date(f.col('discharge_date'), 'MMddyyyy').alias('discharge_date'),
                                  f.explode(combine(f.array(*rev_codes),
                                                    f.array(*chg_codes))).alias('combined_rev_chg_codes'),
                                  f.col('combined_rev_chg_codes.zipped_rev').cast(t.IntegerType()).alias('rev_code'),
                                  f.col('combined_rev_chg_codes.zipped_chg').cast(t.DecimalType(scale=2)).alias('chg'))
                          .drop(f.col('combined_rev_chg_codes'))
                          .where(f.col('rev_code').isNotNull()))

        return he_df_filtered

    @staticmethod
    def income_for_service(csv_dataframe, bucket_dataframe):
        """
        Joins the `csv_dataframe` and `bucket_dataframe` dataframes on the 'rev_code' column,
        then filters them based on the condition that the discharge date falls between the begin date and end date.
        The function then groups the resulting dataframe by 'rev_code', sums the 'chg' column and returns the
        resulting dataframe.
        :param csv_dataframe: The prepared CSV dataframe to be joined.
        :param bucket_dataframe: The prepared Bucket dataframe to be joined.
        :return: The resulting dataframe with aggregated values of 'chg' column grouped by 'rev_code'.
        """

        joined_df = (csv_dataframe
                     .join(bucket_dataframe, on='rev_code', how='inner')
                     .where(f.col('discharge_date').between(f.col('begin_date'), f.col('end_date'))))

        result_df = (joined_df
                     .groupBy('rev_code')
                     .agg(f.sum('chg'))
                     .orderBy('rev_code'))

        return result_df

    def solve_task2(self):
        """
        Calls all the functions needed to solve the task, which involves computing income for hospital services.
        :param:
            self: An object which has the following attributes:
                - rev_code_path: A string representing the path to the rev_code_df file.
                - he_path: A string representing the path to the hospitalEncounter file.
                - num: An integer representing the number of the enumeration of rev_codes and chg.
        Returns:
            A tuple with two elements:
            - The result file, which is a CSV file containing the computed income for hospital services.
            - The result dataframe, which is a DataFrame containing the same information as the result file.
        """

        prepared_rev_df = self.preparing_rev_df(rev_code_df=self.rev_code_df)

        prepared_he_df = self.preparing_hospital_enc_df(he_df=self.he_df)

        result_df = self.income_for_service(csv_dataframe=prepared_he_df,
                                            bucket_dataframe=prepared_rev_df)

        write_to_csv(df=result_df, file_path=RESULT_FILE)
